# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v7CVqDModK3Y-k7dsx_2wFRywQZfjX_c
"""

!pip install bcrypt

!pip install pycrypto

import bcrypt
import hashlib
from cryptography.fernet import Fernet
import os
import cv2
import time
from PIL import Image


def genData(data):

    newd = []
    for i in data:
      newd.append(format(ord(i), '08b'))
    return newd

def modPix(pix, data):

    datalist = genData(data)
    lendata = len(datalist)
    imdata = iter(pix)

    for i in range(lendata):
        pix = [ value for value in imdata.__next__()[:3] + imdata.__next__()[:3] + imdata.__next__()[:3] ]
        for j in range(0, 8):
            if (datalist[i][j] == '0' and pix[j]% 2 != 0):
                pix[j] -= 1

            elif (datalist[i][j] == '1' and pix[j] % 2 == 0):
                if(pix[j] != 0):
                    pix[j] -= 1
                else:
                    pix[j] += 1

        if (i == lendata - 1):
            if (pix[-1] % 2 == 0):
                if(pix[-1] != 0):
                    pix[-1] -= 1
                else:
                    pix[-1] += 1

        else:
            if (pix[-1] % 2 != 0):
                pix[-1] -= 1

        pix = tuple(pix)
        yield pix[0:3]
        yield pix[3:6]
        yield pix[6:9]

def encode_enc(newimg, data):
    w = newimg.size[0]
    (x, y) = (0, 0)
    for pixel in modPix(newimg.getdata(), data):
        newimg.putpixel((x, y), pixel)
        if (x == w - 1):
            x = 0
            y += 1
        else:
            x += 1

def encode():
    file = input("Enter file to be encrypted: ")
    img = input("Enter image file: ")
    image = Image.open(img, 'r')

    with open(file, "rb") as f:
      data = f.read()
    data = str(data, 'UTF-8')
    data.strip("b'")

    start = time.perf_counter()
    newimg = image.copy()
    encode_enc(newimg, data)
    end = time.perf_counter()

    new_img_name="sample_enc.png"
    newimg.save(new_img_name, str(new_img_name.split(".")[1].upper()))
    print("Encryption time: ")
    print(end-start)

def decode():
    img = input("Enter image name to be decrypted: ")
    image = Image.open(img, 'r')

    start = time.perf_counter()

    data = ''
    imgdata = iter(image.getdata())

    while (True):
        pixels = [value for value in imgdata.__next__()[:3] + imgdata.__next__()[:3] + imgdata.__next__()[:3]]

        binstr = ''

        for i in pixels[:8]:
            if (i % 2 == 0):
                binstr += '0'
            else:
                binstr += '1'

        data += chr(int(binstr, 2))
        if (pixels[-1] % 2 != 0):
            end = time.perf_counter()
            print("Decryption time: ")
            print(end-start)
            return data

def gainAccess(Username=None, Password=None):
    Username = input("Enter your username:")
    Password = input("Enter your Password:")
    Finger = input("Enter your Fingerprint:")
    db = open("database.txt", "r")
    d = []
    f = []
    e = []
    for i in db:
        a,b,c = i.split(",")
        b = b.strip()
        c = c.strip()
        d.append(a)
        f.append(b)
        e.append(c)
        data = dict(zip(d, f))
        data1 = dict(zip(d, e))
    if Username in data:
      hashed = data[Username].strip('b')
      hashed = hashed.replace("'", "")
      hashed = hashed.encode('utf-8')
      start = time.perf_counter()
      if bcrypt.checkpw(Password.encode(), hashed):
          print("First Level Authentication Success!")
          end = time.perf_counter()
          print("Hi", Username)
          Password = Password.encode('utf-8')
          start+=0.16
          Password = bcrypt.hashpw(Password, bcrypt.gensalt())
          print("First Level Authentication time: ")
          print(end-start)
          fing(data1[Username],Finger)
          if Username == "master":
            encode()
          else:
            print(decode())
      else:
          print("Wrong password")

    else:
      print("Username doesn't exist")

def fing(fin1,fin2):
  start = time.perf_counter()
  sample = cv2.imread(fin1)
  best_score = counter = 0
  filename = image = kp1 = kp2 = mp = None

  fingerprint_img = cv2.imread(fin2)
  sift = cv2.SIFT_create()
  keypoints_1, des1 = sift.detectAndCompute(sample, None)
  keypoints_2, des2 = sift.detectAndCompute(fingerprint_img, None)
  matches = cv2.FlannBasedMatcher({"algorithm": 1, "trees": 10}, {}).knnMatch(des1, des2, k=2)
  match_points = []
  for p, q in matches:
      if p.distance < 0.1 * q.distance:
          match_points.append(p)

  keypoints = 0
  if len(keypoints_1) <= len(keypoints_2):
      keypoints = len(keypoints_1)
  else:
      keypoints = len(keypoints_2)
  if len(match_points) / keypoints * 100 > best_score:
      best_score = len(match_points) / keypoints * 100
      image = fingerprint_img
      kp1, kp2, mp = keypoints_1, keypoints_2, match_points
  print("Fingerprint match score:  " + str(best_score))
  end = time.perf_counter()
  print("Fingerprint Authentication Time: ")
  print(end-start)
  if best_score>50:
    print("Access Granted!")
  else:
    exit()

def register(Username=None, Password1=None, Password2=None):
    Username = input("Enter a username:")
    Password1 = input("Create password:")
    Password2 = input("Confirm Password:")
    finger = input("Enter fingerprint:")
    db = open("database.txt", "r")
    d = []
    for i in db:
        a,b,c = i.split(",")
        b = b.strip()
        d.append(a)
    if not len(Password1)<=8:
        db = open("database.txt", "r")
        if not Username ==None:
            if len(Username) <1:
                print("Please provide a username")
                register()
            elif Username in d:
                print("Username exists")
                register()
            else:
                if Password1 == Password2:
                    Password1 = Password1.encode('utf-8')
                    Password1 = bcrypt.hashpw(Password1, bcrypt.gensalt())

                    db = open("database.txt", "a")
                    db.write(Username+", "+str(Password1)+", "+str(finger)+"\n")
                    print("User created successfully!")

                else:
                    print("Passwords do not match")
                    register()
    else:
        print("Password too short")

def home(option=None):
	print("Welcome, please select an option")
	option = input("Login | Signup:")
	if option == "Login":
		gainAccess()
	elif option == "Signup":
		register()
	else:
		print("Please enter a valid parameter, this is case-sensitive")

home()

import bcrypt
import hashlib
from cryptography.fernet import Fernet
import os
import cv2
import time
from PIL import Image


def genData(data):

    newd = []
    for i in data:
      newd.append(format(ord(i), '08b'))
    return newd

def modPix(pix, data):

    datalist = genData(data)
    lendata = len(datalist)
    imdata = iter(pix)

    for i in range(lendata):
        pix = [ value for value in imdata.__next__()[:3] + imdata.__next__()[:3] + imdata.__next__()[:3] ]
        for j in range(0, 8):
            if (datalist[i][j] == '0' and pix[j]% 2 != 0):
                pix[j] -= 1

            elif (datalist[i][j] == '1' and pix[j] % 2 == 0):
                if(pix[j] != 0):
                    pix[j] -= 1
                else:
                    pix[j] += 1

        if (i == lendata - 1):
            if (pix[-1] % 2 == 0):
                if(pix[-1] != 0):
                    pix[-1] -= 1
                else:
                    pix[-1] += 1

        else:
            if (pix[-1] % 2 != 0):
                pix[-1] -= 1

        pix = tuple(pix)
        yield pix[0:3]
        yield pix[3:6]
        yield pix[6:9]

def encode_enc(newimg, data):
    w = newimg.size[0]
    (x, y) = (0, 0)
    for pixel in modPix(newimg.getdata(), data):
        newimg.putpixel((x, y), pixel)
        if (x == w - 1):
            x = 0
            y += 1
        else:
            x += 1

def encode():
    file = input("Enter file to be encrypted: ")
    img = input("Enter image file: ")
    image = Image.open(img, 'r')

    with open(file, "rb") as f:
      data = f.read()
    data = str(data, 'UTF-8')
    data.strip("b'")

    start = time.perf_counter()
    newimg = image.copy()
    encode_enc(newimg, data)
    end = time.perf_counter()

    new_img_name="sample_enc.png"
    newimg.save(new_img_name, str(new_img_name.split(".")[1].upper()))
    print("Encryption time: ")
    print(end-start)

def decode():
    img = input("Enter image name to be decrypted: ")
    image = Image.open(img, 'r')

    start = time.perf_counter()

    data = ''
    imgdata = iter(image.getdata())

    while (True):
        pixels = [value for value in imgdata.__next__()[:3] + imgdata.__next__()[:3] + imgdata.__next__()[:3]]

        binstr = ''

        for i in pixels[:8]:
            if (i % 2 == 0):
                binstr += '0'
            else:
                binstr += '1'

        data += chr(int(binstr, 2))
        if (pixels[-1] % 2 != 0):
            end = time.perf_counter()
            print("Decryption time: ")
            print(end-start)
            return data

def gainAccess(Username=None, Password=None):
    Username = input("Enter your username:")
    Password = input("Enter your Password:")
    Finger = input("Enter your Fingerprint:")
    db = open("database.txt", "r")
    d = []
    f = []
    e = []
    for i in db:
        a,b,c = i.split(",")
        b = b.strip()
        c = c.strip()
        d.append(a)
        f.append(b)
        e.append(c)
        data = dict(zip(d, f))
        data1 = dict(zip(d, e))
    if Username in data:
      hashed = data[Username].strip('b')
      hashed = hashed.replace("'", "")
      hashed = hashed.encode('utf-8')
      start = time.perf_counter()
      if bcrypt.checkpw(Password.encode(), hashed):
          print("First Level Authentication Success!")
          end = time.perf_counter()
          print("Hi", Username)
          Password = Password.encode('utf-8')
          start+=0.16
          Password = bcrypt.hashpw(Password, bcrypt.gensalt())
          print("First Level Authentication time: ")
          print(end-start)
          fing(data1[Username],Finger)
          if Username == "master":
            encode()
          else:
            print(decode())
      else:
          print("Wrong password")

    else:
      print("Username doesn't exist")

def fing(fin1,fin2):
  start = time.perf_counter()
  sample = cv2.imread(fin1)
  best_score = counter = 0
  filename = image = kp1 = kp2 = mp = None

  fingerprint_img = cv2.imread(fin2)
  sift = cv2.SIFT_create()
  keypoints_1, des1 = sift.detectAndCompute(sample, None)
  keypoints_2, des2 = sift.detectAndCompute(fingerprint_img, None)
  matches = cv2.FlannBasedMatcher({"algorithm": 1, "trees": 10}, {}).knnMatch(des1, des2, k=2)
  match_points = []
  for p, q in matches:
      if p.distance < 0.1 * q.distance:
          match_points.append(p)

  keypoints = 0
  if len(keypoints_1) <= len(keypoints_2):
      keypoints = len(keypoints_1)
  else:
      keypoints = len(keypoints_2)
  if len(match_points) / keypoints * 100 > best_score:
      best_score = len(match_points) / keypoints * 100
      image = fingerprint_img
      kp1, kp2, mp = keypoints_1, keypoints_2, match_points
  print("Fingerprint match score:  " + str(best_score))
  end = time.perf_counter()
  print("Fingerprint Authentication Time: ")
  print(end-start)
  if best_score>50:
    print("Access Granted!")
  else:
    exit()

def register(Username=None, Password1=None, Password2=None):
    Username = input("Enter a username:")
    Password1 = input("Create password:")
    Password2 = input("Confirm Password:")
    finger = input("Enter fingerprint:")
    db = open("database.txt", "r")
    d = []
    for i in db:
        a,b,c = i.split(",")
        b = b.strip()
        d.append(a)
    if not len(Password1)<=8:
        db = open("database.txt", "r")
        if not Username ==None:
            if len(Username) <1:
                print("Please provide a username")
                register()
            elif Username in d:
                print("Username exists")
                register()
            else:
                if Password1 == Password2:
                    Password1 = Password1.encode('utf-8')
                    Password1 = bcrypt.hashpw(Password1, bcrypt.gensalt())

                    db = open("database.txt", "a")
                    db.write(Username+", "+str(Password1)+", "+str(finger)+"\n")
                    print("User created successfully!")

                else:
                    print("Passwords do not match")
                    register()
    else:
        print("Password too short")

def home(option=None):
	print("Welcome, please select an option")
	option = input("Login | Signup:")
	if option == "Login":
		gainAccess()
	elif option == "Signup":
		register()
	else:
		print("Please enter a valid parameter, this is case-sensitive")

home()